{"version":3,"sources":["store/actions/index.js","store/reducers/errorReducer.js","store/reducers/initReducer.js","store/reducers/loadingReducer.js","store/reducers/postListReducer.js","store/reducers/queryReducer.js","store/store.js","components/User.js","components/Comments.js","components/PostItem.js","components/PostList.js","index.js"],"names":["createActionStartLoading","type","createActionHandleSuccess","combineData","createActionHandleError","errorReducer","state","arguments","length","undefined","initReducer","loadingReducer","postListReducer","action","console","log","filter","post","id","map","Object","objectSpread2","comments","comment","queryReducer","value","getPosts","getStatusLoading","isLoading","getError","hasError","getStatusIsInit","isInit","getSearchQuery","query","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","User","_ref","currentUser","userName","name","email","address","react_default","a","createElement","Fragment","city","mapDispatchToProps","deleteComment","connect","currentComments","_ref2","body","react","key","Comment","Group","Avatar","as","src","Content","Author","Message","Header","Button","onClick","basic","color","Metadata","Icon","deletePost","title","user","rnd","Math","floor","random","Image","size","ui","Card","components_User","Meta","className","Description","components_Comments","extra","href","primary","PostList","loadDataFromServer","searchQuery","loadPosts","visiblePosts","toLowerCase","includes","Container","lib","debounceTimeout","onChange","e","target","icon","placeholder","Dimmer","active","Loader","Grid","columns","divided","Row","Column","components_PostItem","content","labelPosition","startLoading","handleError","handleSuccess","dispatch","postsFromServer","usersFromServer","commentsFromServer","regenerator_default","async","_context","prev","next","awrap","Promise","all","axios","get","catch","sent","slicedToArray","data","find","userId","postId","stop","defaultProps","ReactDOM","render","es","components_PostList","document","getElementById"],"mappings":"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","file":"static/js/main.c4b45b17.chunk.js","sourcesContent":["import axios from 'axios/index';\n\nexport const START_LOADING = 'START_LOADING';\nexport const HANDLE_SUCCESS = 'HANDLE_SUCCESS';\nexport const HANDLE_ERROR = 'HANDLE_ERROR';\nexport const POST_DELETE = 'POST_DELETE';\nexport const COMMENT_DELETE = 'COMMENT_DELETE';\nexport const SEARCH_POST = 'SEARCH_POST';\n\nexport const createActionStartLoading = () => ({\n  type: START_LOADING,\n});\n\nexport const createActionHandleSuccess = combineData => ({\n  type: HANDLE_SUCCESS,\n  combineData,\n});\n\nexport const createActionHandleError = () => ({\n  type: HANDLE_ERROR,\n});\n\nexport const createActionDeletePost = id => ({\n  type: POST_DELETE,\n  id,\n});\n\nexport const createActionDeleteComment = id => ({\n  type: COMMENT_DELETE,\n  id,\n});\n\nexport const createActionSearchQuery = value => ({\n  type: SEARCH_POST,\n  value,\n});\n\nexport const createActionloadTodos = () => async(dispatch) => {\n  dispatch(createActionStartLoading());\n\n  const [\n    postsFromServer,\n    usersFromServer,\n    commentsFromServer,\n\n  ] = await Promise.all([\n    axios.get('https://jsonplaceholder.typicode.com/posts'),\n    axios.get('https://jsonplaceholder.typicode.com/users'),\n    axios.get('https://jsonplaceholder.typicode.com/comments'),\n  ]).catch(() => {\n    dispatch(createActionHandleError());\n  });\n\n  const combineData = postsFromServer.data.map(post => ({\n    ...post,\n    user: usersFromServer.data.find(user => user.id === post.userId),\n    comments: commentsFromServer.data\n      .filter(comment => comment.postId === post.id),\n  }));\n\n  dispatch(createActionHandleSuccess(combineData));\n};\n","import { START_LOADING, HANDLE_ERROR } from '../actions';\n\nconst errorReducer = (state = false, action) => {\n  switch (action.type) {\n    case START_LOADING:\n      return false;\n    case HANDLE_ERROR:\n      return true;\n    default:\n      return state;\n  }\n};\n\nexport default errorReducer;\n","import { START_LOADING, HANDLE_SUCCESS } from '../actions';\n\nconst initReducer = (state = false, action) => {\n  switch (action.type) {\n    case START_LOADING:\n      return false;\n    case HANDLE_SUCCESS:\n      return true;\n    default:\n      return state;\n  }\n};\n\nexport default initReducer;\n","import { START_LOADING, HANDLE_SUCCESS, HANDLE_ERROR } from '../actions';\n\nconst loadingReducer = (state = false, action) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n    case HANDLE_SUCCESS:\n      return false;\n    case HANDLE_ERROR:\n      return false;\n    default:\n      return state;\n  }\n};\n\nexport default loadingReducer;\n","import { POST_DELETE, HANDLE_SUCCESS, COMMENT_DELETE } from '../actions';\n\nconst postListReducer = (state = [], action) => {\n  switch (action.type) {\n    case HANDLE_SUCCESS:\n      return action.combineData;\n\n    case POST_DELETE:\n      console.log(state, 'state');\n\n      return state\n        .filter(post => post.id !== action.id);\n\n    case COMMENT_DELETE:\n      return state.map(post => ({\n        ...post,\n        comments: post.comments.filter(comment => comment.id !== action.id),\n      }));\n\n    default:\n      return state;\n  }\n};\n\nexport default postListReducer;\n","import { SEARCH_POST } from '../actions';\n\nconst queryReducer = (state = '', action) => {\n  switch (action.type) {\n    case SEARCH_POST:\n      return action.value;\n    default:\n      return state;\n  }\n};\n\nexport default queryReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\n\nimport thunk from 'redux-thunk';\n\nimport {\n  queryReducer,\n  errorReducer,\n  initReducer,\n  loadingReducer,\n  postListReducer,\n} from './reducers';\n\nexport const getPosts = state => state.combineData;\nexport const getStatusLoading = state => state.isLoading;\nexport const getError = state => state.hasError;\nexport const getStatusIsInit = state => state.isInit;\nexport const getSearchQuery = state => state.query;\n\nconst initialState = {\n  combineData: [],\n  isLoading: false,\n  hasError: false,\n  isInit: false,\n  query: '',\n};\n\nconst rootReducer = combineReducers({\n  combineData: postListReducer,\n  isLoading: loadingReducer,\n  hasError: errorReducer,\n  isInit: initReducer,\n  query: queryReducer,\n\n});\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  applyMiddleware(thunk),\n);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ currentUser }) => {\n  const { name: userName, email, address } = currentUser;\n\n  return (\n    <>\n      <p>{userName}</p>\n      <p>\n        @:\n        {email}\n      </p>\n      <p>\n        city:\n        {address.city}\n      </p>\n    </>\n  );\n};\n\nexport default User;\n\nUser.propTypes = {\n  currentUser: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.objectOf(PropTypes.any),\n  }).isRequired,\n};\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Button,\n  Comment as CommentTag,\n  Icon,\n  Message } from 'semantic-ui-react';\nimport {\n  createActionDeleteComment,\n} from '../store/actions';\n\nconst Comments = ({ currentComments, deleteComment }) => (\n  <>\n    {currentComments.map(({ email, body, id, name: userName }) => (\n      <Fragment key={id}>\n\n        <CommentTag.Group>\n          <CommentTag>\n            <CommentTag.Avatar\n              as=\"a\"\n              src=\"https://react.semantic-ui.com/images/avatar/small/stevie.jpg\"\n            />\n            <CommentTag.Content>\n              <CommentTag.Author>\n                <Message>\n                  <p>\n                    <span>Comments ID:</span>\n                    {id}\n                  </p>\n                  <Message.Header>{userName}</Message.Header>\n                  <p>\n                    {body}\n                  </p>\n                  <p>\n                    <Button onClick={() => deleteComment(id)} basic color=\"red\">\n                        delete comment\n                    </Button>\n                  </p>\n\n                </Message>\n\n                <p />\n                {email}\n              </CommentTag.Author>\n              <CommentTag.Metadata>\n                <div>2 days ago</div>\n                <div>\n                  <Icon name=\"star\" />\n                    5 Faves\n                </div>\n              </CommentTag.Metadata>\n            </CommentTag.Content>\n          </CommentTag>\n\n        </CommentTag.Group>\n      </Fragment>\n    ))\n    }\n  </>\n);\nconst mapDispatchToProps = {\n  deleteComment: createActionDeleteComment,\n};\n\nexport default connect(null, mapDispatchToProps)(Comments);\n\nComments.propTypes = {\n  deleteComment: PropTypes.func.isRequired,\n  currentComments: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Card, Icon, Image as ImageTag, Button } from 'semantic-ui-react';\nimport User from './User';\nimport Comments from './Comments';\nimport {\n  getPosts,\n} from '../store/store';\nimport {\n  createActionDeletePost,\n} from '../store/actions';\n\nconst PostItem = ({ post, deletePost }) => {\n  const { title, body, id, user, comments } = post;\n  const img = [\n    'https://react.semantic-ui.com/images/avatar/large/matthew.png',\n    'https://react.semantic-ui.com/images/avatar/large/elliot.jpg',\n    'https://react.semantic-ui.com/images/avatar/large/daniel.jpg',\n    'https://react.semantic-ui.com/images/avatar/large/steve.jpg',\n    'https://react.semantic-ui.com/images/avatar/large/molly.png',\n    'https://react.semantic-ui.com/images/avatar/large/jenny.jpg',\n  ];\n  const rnd = Math.floor(Math.random() * (6));\n\n  return (\n    <>\n      <ImageTag\n        src={img[rnd]}\n        size=\"mini\"\n        ui={false}\n      />\n      <Card.Content>\n        <Card.Header><User currentUser={user} /></Card.Header>\n        <p />\n        <Card.Header>{title}</Card.Header>\n        <Card.Meta>\n          <p className=\"date\">\n            {id}\n          </p>\n          <p className=\"date\">{body}</p>\n          <p className=\"date\">\n            Joined in 20\n            {Math.floor(10 + Math.random() * (19 + 1 - 10))}\n          </p>\n        </Card.Meta>\n        <Card.Description>\n          <Comments currentComments={comments} />\n        </Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <a href=\"./#\">\n          <Icon name=\"user\" />\n          {Math.floor(Math.random() * (100 + 1 - 1))}\n          {' '}\n          Friends\n        </a>\n        <Card.Description>\n          <Button primary onClick={() => deletePost(id)} basic color=\"red\">\n          DELETE\n          </Button>\n        </Card.Description>\n      </Card.Content>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  combineData: getPosts(state),\n});\n\nconst mapDispatchToProps = {\n  deletePost: createActionDeletePost,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostItem);\n\nPostItem.propTypes = {\n  deletePost: PropTypes.func.isRequired,\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string,\n    user: PropTypes.objectOf(PropTypes.any),\n    comments: PropTypes.arrayOf(PropTypes.any),\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { DebounceInput } from 'react-debounce-input';\nimport { Button,\n  Grid,\n  Container,\n  Dimmer,\n  Loader } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport PostItem from './PostItem';\nimport '../App.css';\nimport {\n  getPosts,\n  getStatusLoading,\n  getError,\n  getStatusIsInit,\n  getSearchQuery,\n} from '../store/store';\n\nimport {\n  createActionStartLoading,\n  createActionHandleError,\n  createActionHandleSuccess,\n  createActionloadTodos,\n  createActionSearchQuery,\n} from '../store/actions';\n\nfunction PostList(\n  {\n    combineData,\n    isLoading,\n    hasError,\n    loadDataFromServer,\n    query,\n    isInit,\n    searchQuery,\n  }\n) {\n  const loadPosts = () => {\n    loadDataFromServer();\n  };\n  const visiblePosts = query === ''\n    ? combineData\n    : combineData.filter(({ title, body }) => (title + body)\n      .toLowerCase()\n      .includes(query.toLowerCase()));\n\n  console.log(visiblePosts);\n\n  return (\n    <Container className=\"App\">\n      {\n        (visiblePosts.length > 0 || isInit)\n          && (\n            <>\n              <DebounceInput\n                debounceTimeout={500}\n                onChange={e => searchQuery(e.target.value)}\n                icon=\"search\"\n                placeholder=\"Search...\"\n              />\n              <Button.Group>\n                <Button>\n                  Now is shown\n                  {visiblePosts.length}\n                  {' '}\n                  posts\n                </Button>\n                <Button onClick={loadPosts}>Reload all posts</Button>\n              </Button.Group>\n            </>\n          )\n      }\n\n      {isLoading\n        && (\n          <Dimmer active>\n            <Loader size=\"huge\">LOADING.....</Loader>\n          </Dimmer>\n        )}\n      {hasError\n        && (\n          <>\n            <p>Error</p>\n            <Button onClick={loadPosts}>Try Again</Button>\n          </>\n        )\n      }\n      {visiblePosts.length === 0 && !hasError && !isInit\n        ? (\n          <>\n            <p>No Posts yet </p>\n            <Button\n              onClick={loadPosts}\n              content=\"Load\"\n              icon=\"right arrow\"\n              labelPosition=\"right\"\n            />\n          </>\n        )\n        : (\n          <Grid columns={3} divided>\n            <Grid.Row>\n\n              {visiblePosts.map(post => (\n                <Grid.Column key={post.id}>\n                  <PostItem post={post} />\n                </Grid.Column>\n              ))}\n\n            </Grid.Row>\n          </Grid>\n        )\n      }\n    </Container>\n  );\n}\n\nconst mapStateToProps = state => ({\n  combineData: getPosts(state),\n  isLoading: getStatusLoading(state),\n  hasError: getError(state),\n  isInit: getStatusIsInit(state),\n  query: getSearchQuery(state),\n\n});\n\nconst mapDispatchToProps = {\n  startLoading: createActionStartLoading,\n  handleError: createActionHandleError,\n  handleSuccess: createActionHandleSuccess,\n  loadDataFromServer: createActionloadTodos,\n  searchQuery: createActionSearchQuery,\n\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostList);\n\nPostList.propTypes = {\n  combineData: PropTypes.arrayOf(PropTypes.any).isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  hasError: PropTypes.bool.isRequired,\n  loadDataFromServer: PropTypes.func.isRequired,\n  searchQuery: PropTypes.func.isRequired,\n  isInit: PropTypes.bool,\n  query: PropTypes.string.isRequired,\n};\n\nPostList.defaultProps = {\n  isInit: false,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport './index.css';\nimport PostList from './components/PostList';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PostList />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}