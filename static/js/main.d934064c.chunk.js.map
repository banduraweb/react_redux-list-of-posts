{"version":3,"sources":["store/store.js","components/User.js","components/Comments.js","components/PostItem.js","components/PostList.js","index.js"],"names":["createActionStartLoading","type","createActionHandleSuccess","combineData","createActionHandleError","getPosts","state","getStatusLoading","isLoading","getError","hasError","getStatusIsInit","isInit","store","createStore","action","Object","objectSpread2","originCopy","filter","post","id","value","title","toLowerCase","includes","body","applyMiddleware","thunk","User","_ref","currentUser","userName","name","email","address","react_default","a","createElement","Fragment","city","Comments","currentComments","map","_ref2","react","key","Comment","Group","Avatar","as","src","Content","Author","Message","Header","Metadata","Icon","mapDispatchToProps","deletePost","connect","user","comments","rnd","Math","floor","random","Image","size","ui","Card","components_User","Meta","className","Description","components_Comments","extra","href","Button","primary","onClick","basic","color","PostList","loadDataFromServer","searchQuery","loadPosts","Container","length","lib","debounceTimeout","onChange","icon","placeholder","Dimmer","active","Loader","Grid","columns","divided","Row","Column","components_PostItem","content","labelPosition","startLoading","handleError","handleSuccess","dispatch","postsFromServer","usersFromServer","commentsFromServer","regenerator_default","async","_context","prev","next","awrap","Promise","all","axios","get","catch","sent","slicedToArray","data","find","userId","comment","postId","stop","e","target","defaultProps","ReactDOM","render","es","components_PostList","document","getElementById"],"mappings":"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","file":"static/js/main.d934064c.chunk.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport axios from 'axios';\n\nconst START_LOADING = 'START_LOADING';\nconst HANDLE_SUCCESS = 'HANDLE_SUCCESS';\nconst HANDLE_ERROR = 'HANDLE_ERROR';\nconst POST_DELETE = 'POST_DELETE';\nconst SEARCH_POST = 'SEARCH_POST';\n\nexport const createActionStartLoading = () => ({\n  type: START_LOADING,\n});\n\nexport const createActionHandleSuccess = combineData => ({\n  type: HANDLE_SUCCESS,\n  combineData,\n});\n\nexport const createActionHandleError = () => ({\n  type: HANDLE_ERROR,\n});\n\nexport const createActionDeletePost = id => ({\n  type: POST_DELETE,\n  id,\n});\n\nexport const createActionSearchQuery = (e) => {\n  const { value } = e.target;\n\n  return {\n    type: SEARCH_POST,\n    value,\n  };\n};\n\nconst initialState = {\n  combineData: [],\n  isLoading: false,\n  hasError: false,\n  originCopy: [],\n};\n\nexport const createActionloadTodos = () => async(dispatch) => {\n  dispatch(createActionStartLoading());\n\n  const [\n    postsFromServer,\n    usersFromServer,\n    commentsFromServer,\n\n  ] = await Promise.all([\n    axios.get('https://jsonplaceholder.typicode.com/posts'),\n    axios.get('https://jsonplaceholder.typicode.com/users'),\n    axios.get('https://jsonplaceholder.typicode.com/comments'),\n  ]).catch(() => {\n    dispatch(createActionHandleError());\n  });\n\n  const combineData = postsFromServer.data.map(post => ({\n    ...post,\n    user: usersFromServer.data.find(user => user.id === post.userId),\n    comments: commentsFromServer.data\n      .filter(comment => comment.postId === post.id),\n  }));\n\n  dispatch(createActionHandleSuccess(combineData));\n};\n\nexport const getPosts = state => state.combineData;\nexport const getStatusLoading = state => state.isLoading;\nexport const getError = state => state.hasError;\nexport const getStatusIsInit = state => state.isInit;\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n        hasError: false,\n        isInit: false,\n      };\n    case HANDLE_SUCCESS:\n      return {\n        ...state,\n        combineData: action.combineData,\n        originCopy: action.combineData,\n        isLoading: false,\n        isInit: true,\n      };\n    case HANDLE_ERROR:\n      return {\n        ...state,\n        isLoading: false,\n        hasError: true,\n      };\n    case POST_DELETE:\n      return {\n        ...state,\n        combineData: state.combineData\n          .filter(post => post.id !== action.id),\n      };\n    case SEARCH_POST:\n      if (action.value === '') {\n        return {\n          ...state,\n          combineData: state.originCopy,\n        };\n      }\n\n      return {\n        ...state,\n        combineData: state.combineData\n          .filter(post => post.title.toLowerCase().includes(action.value)\n            || post.body.toLowerCase().includes(action.value)),\n      };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  reducer,\n  initialState,\n  applyMiddleware(thunk),\n);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ currentUser }) => {\n  const { name: userName, email, address } = currentUser;\n\n  return (\n    <>\n      <p>{userName}</p>\n      <p>\n        @:\n        {email}\n      </p>\n      <p>\n        city:\n        {address.city}\n      </p>\n    </>\n  );\n};\n\nexport default User;\n\nUser.propTypes = {\n  currentUser: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.objectOf(PropTypes.any),\n  }).isRequired,\n};\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Comment as CommentTag, Icon, Message } from 'semantic-ui-react';\n\nconst Comments = ({ currentComments }) => (\n  <>\n    {currentComments.map(({ email, body, id, name: userName }) => (\n      <Fragment key={id}>\n\n        <CommentTag.Group>\n          <CommentTag>\n            <CommentTag.Avatar\n              as=\"a\"\n              src=\"https://react.semantic-ui.com/images/avatar/small/stevie.jpg\"\n            />\n            <CommentTag.Content>\n              <CommentTag.Author>\n                <Message>\n                  <Message.Header>{userName}</Message.Header>\n                  <p>\n                    {body}\n                  </p>\n                </Message>\n\n                <p />\n                {email}\n              </CommentTag.Author>\n              <CommentTag.Metadata>\n                <div>2 days ago</div>\n                <div>\n                  <Icon name=\"star\" />\n                  5 Faves\n                </div>\n              </CommentTag.Metadata>\n            </CommentTag.Content>\n          </CommentTag>\n        </CommentTag.Group>\n      </Fragment>\n    ))\n    }\n  </>\n);\n\nexport default Comments;\n\nComments.propTypes = {\n  currentComments: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Card, Icon, Image as ImageTag, Button } from 'semantic-ui-react';\nimport User from './User';\nimport Comments from './Comments';\nimport {\n  createActionDeletePost,\n  getPosts,\n} from '../store/store';\n\nconst PostItem = ({ post, deletePost }) => {\n  const { title, body, id, user, comments } = post;\n\n  const img = [\n    'https://react.semantic-ui.com/images/avatar/large/matthew.png',\n    'https://react.semantic-ui.com/images/avatar/large/elliot.jpg',\n    'https://react.semantic-ui.com/images/avatar/large/daniel.jpg',\n    'https://react.semantic-ui.com/images/avatar/large/steve.jpg',\n    'https://react.semantic-ui.com/images/avatar/large/molly.png',\n    'https://react.semantic-ui.com/images/avatar/large/jenny.jpg',\n  ];\n  const rnd = Math.floor(Math.random() * (6));\n\n  return (\n    <>\n      <ImageTag\n        src={img[rnd]}\n        size=\"mini\"\n        ui={false}\n      />\n      <Card.Content>\n        <Card.Header><User currentUser={user} /></Card.Header>\n        <p />\n        <Card.Header>{title}</Card.Header>\n        <Card.Meta>\n          <p className=\"date\">\n            {id}\n          </p>\n          <p className=\"date\">{body}</p>\n          <p className=\"date\">\n            Joined in 20\n            {Math.floor(10 + Math.random() * (19 + 1 - 10))}\n          </p>\n        </Card.Meta>\n        <Card.Description>\n          <Comments currentComments={comments} />\n        </Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <a href=\"./#\">\n          <Icon name=\"user\" />\n          {Math.floor(Math.random() * (100 + 1 - 1))}\n          {' '}\n          Friends\n        </a>\n        <Card.Description>\n          <Button primary onClick={() => deletePost(id)} basic color=\"red\">\n          DELETE\n          </Button>\n        </Card.Description>\n      </Card.Content>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  combineData: getPosts(state),\n});\n\nconst mapDispatchToProps = {\n  deletePost: createActionDeletePost,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostItem);\n\nPostItem.propTypes = {\n  deletePost: PropTypes.func.isRequired,\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string,\n    user: PropTypes.objectOf(PropTypes.any),\n    comments: PropTypes.arrayOf(PropTypes.any),\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { DebounceInput } from 'react-debounce-input';\nimport { Button,\n  Grid,\n  Container,\n  Dimmer,\n  Loader } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport PostItem from './PostItem';\nimport '../App.css';\nimport {\n  createActionStartLoading,\n  createActionHandleError,\n  createActionHandleSuccess,\n  createActionloadTodos,\n  getPosts,\n  getStatusLoading,\n  getError,\n  createActionSearchQuery,\n  getStatusIsInit,\n} from '../store/store';\n\nfunction PostList(\n  {\n    combineData,\n    isLoading,\n    hasError,\n    loadDataFromServer,\n    searchQuery,\n    isInit,\n  }\n) {\n  const loadPosts = () => {\n    loadDataFromServer();\n  };\n\n  return (\n    <Container className=\"App\">\n      {\n        (combineData.length > 0 || isInit)\n          && (\n            <>\n              <DebounceInput\n                debounceTimeout={500}\n                onChange={searchQuery}\n                icon=\"search\"\n                placeholder=\"Search...\"\n              />\n              <Button.Group>\n                <Button>\n                  Now is shown\n                  {combineData.length}\n                  {' '}\n                  posts\n                </Button>\n                <Button onClick={loadPosts}>Reload all posts</Button>\n              </Button.Group>\n            </>\n          )\n      }\n\n      {isLoading\n        && (\n          <Dimmer active>\n            <Loader size=\"huge\">LOADING.....</Loader>\n          </Dimmer>\n        )}\n      {hasError\n        && (\n          <>\n            <p>Error</p>\n            <Button onClick={loadPosts}>Try Again</Button>\n          </>\n        )\n      }\n      {combineData.length === 0 && !hasError && !isInit\n        ? (\n          <>\n            <p>No Posts yet </p>\n            <Button\n              onClick={loadPosts}\n              content=\"Load\"\n              icon=\"right arrow\"\n              labelPosition=\"right\"\n            />\n          </>\n        )\n        : (\n          <Grid columns={3} divided>\n            <Grid.Row>\n\n              {combineData.map(post => (\n                <Grid.Column key={post.id}>\n                  <PostItem post={post} />\n                </Grid.Column>\n              ))}\n\n            </Grid.Row>\n          </Grid>\n        )\n      }\n    </Container>\n  );\n}\n\nconst mapStateToProps = state => ({\n  combineData: getPosts(state),\n  isLoading: getStatusLoading(state),\n  hasError: getError(state),\n  isInit: getStatusIsInit(state),\n\n});\n\nconst mapDispatchToProps = {\n  startLoading: createActionStartLoading,\n  handleError: createActionHandleError,\n  handleSuccess: createActionHandleSuccess,\n  loadDataFromServer: createActionloadTodos,\n  searchQuery: createActionSearchQuery,\n\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostList);\n\nPostList.propTypes = {\n  combineData: PropTypes.arrayOf(PropTypes.any).isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  hasError: PropTypes.bool.isRequired,\n  loadDataFromServer: PropTypes.func.isRequired,\n  searchQuery: PropTypes.func.isRequired,\n  isInit: PropTypes.bool,\n};\n\nPostList.defaultProps = {\n  isInit: false,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport './index.css';\nimport PostList from './components/PostList';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PostList />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}